""" 
Using generators:

Generators are a kind of iterators which do not store all the values in memory, they simply generate the values on the fly (thus you cannot go 
back and perform operations on previously seen indices).
"""

# Define a class named Solution that contains two methods


class Solution:
    # Define a method named arrayStringsAreEqual that takes two lists of strings as parameters and returns a boolean
    def arrayStringsAreEqual(self, word1: List[str], word2: List[str]) -> bool:
        # Use a for loop to iterate over the characters generated by the generate method for both lists
        for c1, c2 in zip(self.generate(word1), self.generate(word2)):
            # If the characters are not equal, return False
            if c1 != c2:
                return False
        # If the loop ends without returning False, return True
        return True

    # Define a method named generate that takes a list of strings as a parameter and yields characters one by one
    def generate(self, wordlist: List[str]):
        # Use a for loop to iterate over the strings in the list
        for word in wordlist:
            # Use another for loop to iterate over the characters in the string
            for char in word:
                # Yield the character as a generator
                yield char
        # Yield None as a sentinel value to indicate the end of the list
        yield None


""" 
The time complexity of the code is O(n), where n is the total number of characters in both lists, because the generate method takes O(1) time per 
character and the arrayStringsAreEqual method compares each pair of characters once. The space complexity of the code is O(1), because no extra 
space is used apart from the input lists and some variables.
"""
